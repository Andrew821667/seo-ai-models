#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —è–¥—Ä–∞ SEO AI Models.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞.
"""

import sys
import os
import json
from pprint import pprint
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')))

from seo_ai_models.models.seo_advisor.enhanced_advisor import EnhancedSEOAdvisor
from seo_ai_models.common.utils.metrics_consistency import MetricsConsistencyChecker

def test_enhanced_seo_advisor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ SEO Advisor."""
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û SEO ADVISOR")
    print("="*80)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ SEO Advisor
    enhanced_advisor = EnhancedSEOAdvisor(industry="digital_marketing")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    test_content = """
    # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    –ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤.
    –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
    
    ## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
    
    ## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ SEO
    
    –û–±–µ—Å–ø–µ—á—å—Ç–µ –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.
    –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print("\n–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é EnhancedSEOAdvisor:")
    result = enhanced_advisor.analyze_content(
        content=test_content,
        target_keywords=["seo", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–∫–æ–Ω—Ç–µ–Ω—Ç"]
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n1. –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–ê:")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {result.content_metrics.get('word_count')}")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {result.content_metrics.get('sentence_count')}")
    print(f"   - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {result.content_metrics.get('avg_sentence_length')}")
    print(f"   - –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {result.content_metrics.get('readability')}")
    
    print(f"\n2. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {result.content_metrics.get('semantic_density')}")
    print(f"   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {result.content_metrics.get('semantic_coverage')}")
    print(f"   - –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å: {result.content_metrics.get('topical_coherence')}")
    print(f"   - –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.content_metrics.get('contextual_relevance')}")
    
    print(f"\n3. E-E-A-T –ú–ï–¢–†–ò–ö–ò:")
    print(f"   - –û–ø—ã—Ç (Experience): {result.content_metrics.get('expertise_score')}")
    print(f"   - –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ (Expertise): {result.content_metrics.get('expertise_score')}")
    print(f"   - –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å (Authority): {result.content_metrics.get('authority_score')}")
    print(f"   - –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (Trustworthiness): {result.content_metrics.get('trust_score')}")
    print(f"   - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ E-E-A-T: {result.content_metrics.get('overall_eeat_score')}")
    
    print(f"\n4. –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í:")
    print(f"   - –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {result.keyword_analysis.get('density')}")
    print(f"   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
    for kw, value in result.keyword_analysis.get('distribution', {}).items():
        print(f"     * {kw}: {value}")
    
    print(f"\n5. –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ü–û–ó–ò–¶–ò–ò: {result.predicted_position}")
    print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤:")
    for pos, prob in result.position_probabilities.items():
        print(f"     * {pos}: {prob*100:.1f}%")
    
    print(f"\n6. –¢–û–ü-5 –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
    for i, task in enumerate(result.priorities[:5], 1):
        print(f"   {i}. {task['task']}")
        print(f"      - –í–ª–∏—è–Ω–∏–µ: {task['impact']:.2f}, –£—Å–∏–ª–∏—è: {task['effort']:.2f}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority_score']:.2f}")
    
    return result

def test_metrics_consistency_checker():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫."""
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï METRICS CONSISTENCY CHECKER")
    print("="*80)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    consistency_checker = MetricsConsistencyChecker()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_metrics = {
        'keyword_density': 0.9,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        'readability': 0.3,      # –ù–∏–∑–∫–∞—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
        'keyword_stuffing': 0.8, # –í—ã—Å–æ–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ø–∞–º–∞ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        'user_engagement': 0.7,  # –ù–æ –≤—ã—Å–æ–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (—á—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç)
        'bounce_rate': 0.2       # –ò –Ω–∏–∑–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤ (—á—Ç–æ —Ç–∞–∫–∂–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç)
    }
    
    print("\n–ò—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    for key, value in test_metrics.items():
        print(f"   - {key}: {value}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    consistent_metrics = consistency_checker.check_and_fix(test_metrics)
    
    print("\n–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    for key, value in consistent_metrics.items():
        if key in test_metrics and test_metrics[key] != value:
            print(f"   - {key}: {value} (–±—ã–ª–æ: {test_metrics[key]}) üîÑ")
        elif key not in test_metrics:
            print(f"   - {key}: {value} (–¥–æ–±–∞–≤–ª–µ–Ω–æ) ‚ûï")
        else:
            print(f"   - {key}: {value}")
    
    return consistent_metrics

def test_rank_predictor(content, keywords):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RANK PREDICTOR")
    print("="*80)
    
    from seo_ai_models.models.seo_advisor.predictors.calibrated_rank_predictor import CalibratedRankPredictor
    from seo_ai_models.models.seo_advisor.predictors.improved_rank_predictor import ImprovedRankPredictor
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–≤
    basic_predictor = CalibratedRankPredictor()
    improved_predictor = ImprovedRankPredictor()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    metrics = {
        'keyword_density': 0.03,
        'content_length': 0.7,
        'readability_score': 0.8,
        'authority_score': 0.5,
        'expertise_score': 0.6,
        'trust_score': 0.7,
        'semantic_depth': 0.65,
        'keyword_prominence': 0.75,
        'meta_tags_score': 0.9,
        'header_structure_score': 0.8,
        'multimedia_score': 0.5,
        'internal_linking_score': 0.6
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ industry)
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞:")
    try:
        position_basic = basic_predictor.predict_position(metrics)
        print(f"   - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {position_basic}")
    except Exception as e:
        print(f"   - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ industry)
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞:")
    try:
        position_improved = improved_predictor.predict_position(metrics)
        print(f"   - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {position_improved}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if hasattr(improved_predictor, 'get_position_probabilities'):
            probabilities = improved_predictor.get_position_probabilities(metrics)
            print("   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤:")
            for pos, prob in probabilities.items():
                print(f"     * {pos}: {prob*100:.1f}%")
    except Exception as e:
        print(f"   - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞: {e}")
    
    return {"base_position": position_basic if 'position_basic' in locals() else None, 
            "improved_position": position_improved if 'position_improved' in locals() else None}

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "*"*80)
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –Ø–î–†–ê SEO AI MODELS")
    print("*"*80)
    print(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    test_content = """
    # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    –ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤.
    –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
    
    ## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
    
    ## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ SEO
    
    –û–±–µ—Å–ø–µ—á—å—Ç–µ –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.
    –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫
    test_metrics_consistency_checker()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
    test_rank_predictor(test_content, ["seo", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–∫–æ–Ω—Ç–µ–Ω—Ç"])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π SEO Advisor (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç)
    test_enhanced_seo_advisor()
    
    print("\n" + "*"*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("*"*80)

if __name__ == "__main__":
    run_all_tests()
