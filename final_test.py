
import logging
import sys
import json
from seo_ai_models.models.seo_advisor.advisor import SEOAdvisor
from seo_ai_models.models.seo_advisor.analyzers.content_analyzer import ContentAnalyzer
from seo_ai_models.models.seo_advisor.analyzers.semantic_analyzer import SemanticAnalyzer
from seo_ai_models.models.seo_advisor.analyzers.eeat.eeat_analyzer import EEATAnalyzer
from seo_ai_models.parsers.adaptive_parsing_pipeline import AdaptiveParsingPipeline

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_seo_components():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –æ—Å–Ω–æ–≤–Ω—ã—Ö SEO –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = """
    SEO Best Practices Guide
    
    This guide covers essential SEO practices for optimizing websites. 
    It includes technical SEO, on-page optimization, and content strategies.
    Keywords play an important role in SEO success.
    """
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = ["SEO", "optimization", "guide"]
    
    # 1. ContentAnalyzer
    print("‚úÖ ContentAnalyzer:")
    content_analyzer = ContentAnalyzer()
    content_metrics = content_analyzer.analyze_text(test_text)
    print(f"  - –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç")
    print(f"  - –ú–µ—Ç—Ä–∏–∫–∏: {json.dumps(content_metrics, indent=2, ensure_ascii=False)[:200]}...")
    
    # 2. SemanticAnalyzer
    print("\n‚úÖ SemanticAnalyzer:")
    semantic_analyzer = SemanticAnalyzer()
    try:
        semantic_results = semantic_analyzer.analyze_text(test_text, keywords)
        print(f"  - –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç")
        if semantic_results:
            print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(semantic_results, indent=2, ensure_ascii=False)[:200]}...")
    except Exception as e:
        print(f"  - –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {e}")
    
    # 3. EEATAnalyzer
    print("\n‚úÖ EEATAnalyzer:")
    eeat_analyzer = EEATAnalyzer()
    eeat_results = eeat_analyzer.analyze(test_text)
    print(f"  - –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç")
    print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(eeat_results, indent=2, ensure_ascii=False)[:200]}...")
    
    # 4. SEOAdvisor
    print("\n‚úÖ SEOAdvisor:")
    advisor = SEOAdvisor()
    try:
        report = advisor.analyze_content(test_text, keywords)
        print(f"  - –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç")
        print(f"  - –ê—Ç—Ä–∏–±—É—Ç—ã –æ—Ç—á–µ—Ç–∞: {', '.join([attr for attr in dir(report) if not attr.startswith('_')])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ—Ç—á–µ—Ç–∞
        content_metrics = getattr(report, 'content_metrics', None)
        if content_metrics:
            print(f"  - –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_metrics}")
        
        keyword_analysis = getattr(report, 'keyword_analysis', None)
        if keyword_analysis:
            print(f"  - –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keyword_analysis}")
        
        predicted_position = getattr(report, 'predicted_position', None)
        if predicted_position:
            print(f"  - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {predicted_position}")
    except Exception as e:
        print(f"  - –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {e}")

def check_parser_components():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    print("‚úÖ AdaptiveParsingPipeline:")
    try:
        pipeline = AdaptiveParsingPipeline()
        print(f"  - –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–∞–π—Ç–∞
        print("  - –ú–µ—Ç–æ–¥ detect_site_type: –ü—Ä–æ–≤–µ—Ä—è–µ–º...")
        site_type = pipeline.detect_site_type("https://example.com")
        print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {site_type}")
    except Exception as e:
        print(f"  - –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    print("\nüöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SEO AI Models\n")
    
    try:
        check_seo_components()
        check_parser_components()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}\n")
