    
    def detect_is_spa(self, html_content: str) -> Dict[str, Any]:
        """
        Определяет, является ли сайт SPA на основе анализа HTML.
        
        Args:
            html_content: HTML-контент для анализа
            
        Returns:
            Dict[str, Any]: Информация о типе сайта
        """
        if not html_content:
            return {
                "is_spa": False,
                "confidence": 0,
                "detected_frameworks": []
            }
            
        # Получаем текст для анализа
        html_text = str(html_content).lower()
        
        # Проверяем на фреймворки
        detected_frameworks = []
        for framework, patterns in self.spa_framework_patterns.items():
            for pattern in patterns:
                pattern_lower = pattern.lower()
                if pattern_lower in html_text:
                    if framework not in detected_frameworks:
                        detected_frameworks.append(framework)
                    break
                    
        # Другие признаки SPA
        spa_indicators = [
            'axios', 'fetch(', '.fetch(', 'XMLHttpRequest', 'jquery.ajax',
            'router', 'history.pushState', 'window.history',
            'template', 'mustache', 'handlebars',
            'spa', 'single-page-application', 'single-page-app'
        ]
        
        # Подсчет признаков SPA
        spa_indicators_found = []
        for indicator in spa_indicators:
            if indicator.lower() in html_text:
                spa_indicators_found.append(indicator)
        
        # Вычисляем оценку уверенности
        confidence = 0
        
        # Если найден хотя бы один фреймворк, высокая уверенность
        if detected_frameworks:
            confidence += 0.7
            
        # Если найдены другие признаки SPA, средняя уверенность
        if spa_indicators_found:
            confidence += min(0.3, 0.05 * len(spa_indicators_found))
            
        # Ограничиваем значение уверенности до 1.0
        confidence = min(1.0, confidence)
        
        # Определяем, является ли сайт SPA
        is_spa = confidence > 0.3 or len(detected_frameworks) > 0
        
        return {
            "is_spa": is_spa,
            "confidence": confidence,
            "detected_frameworks": detected_frameworks
        }
    
    async def _is_ajax_request(self, url: str) -> bool:
        """
        Проверяет, является ли URL AJAX-запросом.
        
        Args:
            url: URL для проверки
            
        Returns:
            bool: True, если URL является AJAX-запросом
        """
        # Игнорируем запросы к статическим файлам
        ignored_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.pdf', '.zip', 
                             '.css', '.ico', '.svg', '.mp4', '.mp3']
        
        if any(url.lower().endswith(ext) for ext in ignored_extensions):
            return False
            
        # Проверяем на паттерны AJAX
        return any(pattern.lower() in url.lower() for pattern in self.ajax_patterns)
    
    async def _setup_ajax_tracking(self, page) -> List[Dict[str, Any]]:
        """
        Настраивает отслеживание AJAX-запросов на странице.
        
        Args:
            page: Объект Page из Playwright
            
        Returns:
            List[Dict[str, Any]]: Список перехваченных AJAX-запросов
        """
        if not self.record_ajax:
            return []
            
        ajax_calls = []
        json_responses = {}
        
        # Обработчик запросов
        async def on_request(request):
            url = request.url
            
            if await self._is_ajax_request(url):
                # Записываем информацию о запросе
                ajax_calls.append({
                    'url': url,
                    'method': request.method,
                    'headers': request.headers,
                    'timestamp': time.time(),
                    'response': None
                })
        
        # Обработчик ответов
        async def on_response(response):
            if not self.analyze_ajax:
                return
                
            url = response.url
            
            if await self._is_ajax_request(url):
                try:
                    content_type = response.headers.get('content-type', '')
                    
                    if 'application/json' in content_type or 'application/javascript' in content_type:
                        # Получаем текст ответа
                        text = await response.text()
                        
                        # Пробуем распарсить JSON
                        try:
                            json_data = json.loads(text)
                            json_responses[url] = json_data
                            
                            # Обновляем записанный AJAX-вызов
                            for call in ajax_calls:
                                if call['url'] == url and call['response'] is None:
                                    call['response'] = {
                                        'status': response.status,
                                        'headers': dict(response.headers),
                                        'json': json_data
                                    }
                                    break
                        except json.JSONDecodeError:
                            pass
                        
                except Exception as e:
                    logger.error(f"Ошибка при обработке ответа от {url}: {str(e)}")
        
        # Устанавливаем обработчики
        page.on('request', on_request)
        page.on('response', on_response)
        
        return ajax_calls
